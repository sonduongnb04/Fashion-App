// Controller gi·ªè h√†ng
const Cart = require('../models/Cart');
const Product = require('../models/Product');
const ResponseHelper = require('../utils/responseHelper');

// L·∫•y gi·ªè h√†ng c·ªßa user
const getCart = async (req, res) => {
    try {
        console.log('üì¶ Getting cart for user:', req.user.id);
        let cart = await Cart.findOne({ userId: req.user.id }).populate('items.product');

        if (!cart) {
            console.log('üÜï Creating new cart for user:', req.user.id);
            cart = new Cart({ userId: req.user.id, items: [] });
            await cart.save();
        }

        console.log('‚úÖ Cart found:', cart.items.length, 'items');
        return ResponseHelper.success(res, cart, 'L·∫•y gi·ªè h√†ng th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Get cart error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi l·∫•y gi·ªè h√†ng');
    }
};

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
const addToCart = async (req, res) => {
    try {
        const { productId, quantity = 1, selectedColor, selectedSize } = req.body;

        console.log('‚ûï Adding to cart:', productId, 'qty:', quantity);

        if (!productId) {
            return ResponseHelper.error(res, 'Thi·∫øu productId', 400);
        }

        const product = await Product.findById(productId);
        if (!product) {
            return ResponseHelper.error(res, 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i', 404);
        }

        let cart = await Cart.findOne({ userId: req.user.id });
        if (!cart) {
            cart = new Cart({ userId: req.user.id, items: [] });
        }

        const existingItem = cart.items.find(
            item => item.product.toString() === productId &&
                item.selectedColor === selectedColor &&
                item.selectedSize === selectedSize
        );

        if (existingItem) {
            console.log('üìà Updating quantity');
            existingItem.quantity += quantity;
        } else {
            console.log('üÜï Adding new item');
            cart.items.push({
                product: productId,
                quantity,
                selectedColor,
                selectedSize
            });
        }

        await cart.save();
        await cart.populate('items.product');

        console.log('üíæ Cart saved:', cart.items.length, 'items');
        return ResponseHelper.success(res, cart, 'Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Add to cart error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi th√™m v√†o gi·ªè h√†ng');
    }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
const removeFromCart = async (req, res) => {
    try {
        const { cartItemId } = req.body;

        console.log('‚ûñ Removing from cart:', cartItemId);

        const cart = await Cart.findOne({ userId: req.user.id });
        if (!cart) {
            return ResponseHelper.error(res, 'Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i', 404);
        }

        cart.items = cart.items.filter(item => item._id.toString() !== cartItemId);
        await cart.save();
        await cart.populate('items.product');

        console.log('üóëÔ∏è Item removed');
        return ResponseHelper.success(res, cart, 'X√≥a kh·ªèi gi·ªè h√†ng th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Remove from cart error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi x√≥a kh·ªèi gi·ªè h√†ng');
    }
};

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
const updateCartItem = async (req, res) => {
    try {
        const { cartItemId, quantity } = req.body;

        console.log('üîÑ Updating cart item:', cartItemId, 'qty:', quantity);

        const cart = await Cart.findOne({ userId: req.user.id });
        if (!cart) {
            return ResponseHelper.error(res, 'Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i', 404);
        }

        const item = cart.items.find(i => i._id.toString() === cartItemId);
        if (!item) {
            return ResponseHelper.error(res, 'S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng', 404);
        }

        if (quantity <= 0) {
            cart.items = cart.items.filter(i => i._id.toString() !== cartItemId);
        } else {
            item.quantity = quantity;
        }

        await cart.save();
        await cart.populate('items.product');

        console.log('‚úÖ Cart item updated');
        return ResponseHelper.success(res, cart, 'C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Update cart error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng');
    }
};

// X√≥a to√†n b·ªô gi·ªè h√†ng
const clearCart = async (req, res) => {
    try {
        console.log('üßπ Clearing cart for user:', req.user.id);

        const cart = await Cart.findOne({ userId: req.user.id });
        if (cart) {
            cart.items = [];
            await cart.save();
        }

        return ResponseHelper.success(res, { items: [] }, 'X√≥a gi·ªè h√†ng th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Clear cart error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi x√≥a gi·ªè h√†ng');
    }
};

module.exports = {
    getCart,
    addToCart,
    removeFromCart,
    updateCartItem,
    clearCart
};


