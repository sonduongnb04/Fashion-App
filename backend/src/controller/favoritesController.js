// Controller y√™u th√≠ch
const Favorite = require('../models/Favorite');
const ResponseHelper = require('../utils/responseHelper');

// L·∫•y danh s√°ch y√™u th√≠ch
const getFavorites = async (req, res) => {
    try {
        console.log('‚ù§Ô∏è Getting favorites for user:', req.user.id);

        let favorite = await Favorite.findOne({ userId: req.user.id }).populate('products');

        if (!favorite) {
            console.log('üÜï Creating new favorites for user:', req.user.id);
            favorite = new Favorite({ userId: req.user.id, products: [] });
            await favorite.save();
        }

        console.log('‚úÖ Favorites found:', favorite.products.length, 'items');
        return ResponseHelper.success(res, favorite.products, 'L·∫•y y√™u th√≠ch th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Get favorites error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi l·∫•y y√™u th√≠ch');
    }
};

// Th√™m v√†o y√™u th√≠ch
const addToFavorites = async (req, res) => {
    try {
        const { productId } = req.body;

        console.log('üíì Adding to favorites:', productId);

        if (!productId) {
            return ResponseHelper.error(res, 'Thi·∫øu productId', 400);
        }

        let favorite = await Favorite.findOne({ userId: req.user.id });
        if (!favorite) {
            favorite = new Favorite({ userId: req.user.id, products: [] });
        }

        if (!favorite.products.includes(productId)) {
            favorite.products.push(productId);
            await favorite.save();
            console.log('‚ù§Ô∏è Added to favorites');
        } else {
            console.log('‚ö†Ô∏è Product already in favorites');
        }

        await favorite.populate('products');
        return ResponseHelper.success(res, favorite.products, 'Th√™m v√†o y√™u th√≠ch th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Add to favorites error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi th√™m v√†o y√™u th√≠ch');
    }
};

// X√≥a kh·ªèi y√™u th√≠ch
const removeFromFavorites = async (req, res) => {
    try {
        const { productId } = req.body;

        console.log('üíî Removing from favorites:', productId);

        const favorite = await Favorite.findOne({ userId: req.user.id });
        if (!favorite) {
            return ResponseHelper.error(res, 'Y√™u th√≠ch kh√¥ng t·ªìn t·∫°i', 404);
        }

        favorite.products = favorite.products.filter(id => id.toString() !== productId);
        await favorite.save();

        console.log('üóëÔ∏è Removed from favorites');
        return ResponseHelper.success(res, favorite.products, 'X√≥a kh·ªèi y√™u th√≠ch th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Remove from favorites error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi x√≥a kh·ªèi y√™u th√≠ch');
    }
};

// Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong y√™u th√≠ch
const isFavorite = async (req, res) => {
    try {
        const { productId } = req.params;

        const favorite = await Favorite.findOne({ userId: req.user.id });
        const isFav = favorite && favorite.products.includes(productId);

        return ResponseHelper.success(res, { isFavorite: isFav }, 'Ki·ªÉm tra th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Check favorite error:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi ki·ªÉm tra y√™u th√≠ch');
    }
};

module.exports = {
    getFavorites,
    addToFavorites,
    removeFromFavorites,
    isFavorite
};
