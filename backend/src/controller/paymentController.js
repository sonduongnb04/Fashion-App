// Controller thanh to√°n (khung c∆° b·∫£n, c√≥ th·ªÉ t√≠ch h·ª£p c·ªïng sau)
const Response = require('../utils/responseHelper');
const Order = require('../models/Order');
const Payment = require('../models/Payment');

// T·∫°o y√™u c·∫ßu thanh to√°n cho m·ªôt ƒë∆°n h√†ng
const initiate = async (req, res) => {
    try {
        const { orderId, provider = 'cod' } = req.body;

        if (!req.user?.id) {
            return Response.unauthorized(res, 'C·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o thanh to√°n');
        }

        const order = await Order.findById(orderId).populate('user', 'email username');
        if (!order) return Response.notFound(res, 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng');
        if (order.amounts.total <= 0) return Response.error(res, 'T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá', 400);

        // Verify user owns this order
        if (order.user._id.toString() !== req.user.id) {
            return Response.forbidden(res, 'B·∫°n kh√¥ng c√≥ quy·ªÅn thanh to√°n cho ƒë∆°n h√†ng n√†y');
        }

        console.log('üí≥ Initiating payment for order:', orderId, 'Provider:', provider, 'Amount:', order.amounts.total);

        // N·∫øu ƒë√£ c√≥ payment t·ªìn t·∫°i, tr·∫£ v·ªÅ
        let payment = await Payment.findOne({ order: order._id });
        if (!payment) {
            payment = await Payment.create({
                order: order._id,
                user: req.user.id,  // FORCE set user ID from auth
                provider,
                amount: order.amounts.total,
                status: provider === 'cod' ? 'authorized' : 'pending',
                meta: {
                    initiatedAt: new Date(),
                    userEmail: order.user.email,
                }
            });
        }

        console.log('‚úÖ Payment created:', payment._id, 'Status:', payment.status);

        // V·ªõi COD coi nh∆∞ ƒë√£ u·ª∑ quy·ªÅn, x√°c nh·∫≠n sau khi giao h√†ng
        // V·ªõi c√°c c·ªïng online, ·ªü ƒë√¢y b·∫°n s·∫Ω t·∫°o paymentIntent v√† tr·∫£ clientSecret/redirectUrl
        return Response.created(res, payment, 'Kh·ªüi t·∫°o thanh to√°n th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Initiate payment error:', error);
        return Response.serverError(res, 'Kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c thanh to√°n');
    }
};

// X√°c nh·∫≠n thanh to√°n (webhook ho·∫∑c client callback)
const confirm = async (req, res) => {
    try {
        const { paymentId, status = 'paid', providerRef, meta } = req.body;

        if (!req.user?.id) {
            return Response.unauthorized(res, 'C·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ x√°c nh·∫≠n thanh to√°n');
        }

        const payment = await Payment.findById(paymentId).populate('order');
        if (!payment) return Response.notFound(res, 'Kh√¥ng t√¨m th·∫•y payment');

        // Verify user owns this payment
        if (payment.user.toString() !== req.user.id) {
            return Response.forbidden(res, 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n thanh to√°n n√†y');
        }

        console.log('‚úÖ Confirming payment:', paymentId, 'New status:', status);

        payment.status = status;
        if (providerRef) payment.providerRef = providerRef;
        if (meta) payment.meta = { ...(payment.meta || {}), ...meta };
        await payment.save();

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n theo payment
        if (status === 'paid' || status === 'authorized') {
            payment.order.status = 'paid';
            console.log('üì¶ Updating order status to paid:', payment.order._id);
            await payment.order.save();
        } else if (status === 'failed' || status === 'cancelled') {
            // tu·ª≥ ch√≠nh s√°ch m√† c·∫≠p nh·∫≠t order
            console.warn('‚ö†Ô∏è Payment failed/cancelled:', paymentId);
        }

        return Response.success(res, payment, 'X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå Confirm payment error:', error);
        return Response.serverError(res, 'Kh√¥ng x√°c nh·∫≠n ƒë∆∞·ª£c thanh to√°n');
    }
};

// L·∫•y tr·∫°ng th√°i thanh to√°n
const getStatus = async (req, res) => {
    try {
        const { id } = req.params;
        const payment = await Payment.findById(id).populate('order', 'code status amounts total');
        if (!payment) return Response.notFound(res, 'Kh√¥ng t√¨m th·∫•y payment');
        return Response.success(res, payment, 'Tr·∫°ng th√°i thanh to√°n');
    } catch (error) {
        console.error('Get payment status error:', error);
        return Response.serverError(res, 'L·ªói khi l·∫•y tr·∫°ng th√°i thanh to√°n');
    }
};

module.exports = { initiate, confirm, getStatus };


