// Controller qu·∫£n l√Ω s·∫£n ph·∫©m 
const Product = require('../models/Product');
const Category = require('../models/Category');
const { validationResult } = require('express-validator');
const ResponseHelper = require('../utils/responseHelper');
const { QueryHelper } = require('../utils/queryHelpers');

// L·∫•y danh s√°ch s·∫£n ph·∫©m (ph√¢n trang + filter c∆° b·∫£n)
const getAllProducts = async (req, res) => {
    try {
        const { page = 1, limit = 20, category, isActive, minPrice, maxPrice, inStock, isFeatured, hasDiscount, sort = '-createdAt' } = req.query;

        const filter = {};
        // Ch·ªâ filter isActive n·∫øu ƒë∆∞·ª£c truy·ªÅn v√†o
        if (isActive !== undefined && isActive !== 'all') {
            filter.isActive = isActive === 'true';
        }

        if (category) {
            console.log('Filtering by category:', category);
            const categoryDoc = await Category.findById(category);
            if (categoryDoc) {
                console.log('Category found:', categoryDoc.name, categoryDoc._id);
                const allCategories = await Category.getAllSubcategories(category);
                const categoryIds = [categoryDoc._id, ...allCategories.map(cat => cat._id)];
                console.log('Category IDs to filter:', categoryIds.map(id => id.toString()));
                filter.$or = [{ category: { $in: categoryIds } }, { subcategory: { $in: categoryIds } }];
            } else {
                console.log('Category not found for ID:', category);
            }
        }

        if (minPrice || maxPrice) {
            filter.price = {};
            if (minPrice) filter.price.$gte = parseFloat(minPrice);
            if (maxPrice) filter.price.$lte = parseFloat(maxPrice);
        }
        if (inStock === 'true') filter['stock.quantity'] = { $gt: 0 };

        // Filter cho s·∫£n ph·∫©m n·ªïi b·∫≠t
        if (isFeatured === 'true') {
            filter.isFeatured = true;
        }

        // Filter cho s·∫£n ph·∫©m c√≥ gi·∫£m gi√°
        if (hasDiscount === 'true') {
            filter.discount = { $gt: 0 };
        }

        console.log('Product list filter:', JSON.stringify(filter));

        const queryHelper = new QueryHelper(Product.find(filter), req.query);
        const products = await queryHelper
            .sort()
            .paginate()
            .populate('category', 'name slug')
            .populate('subcategory', 'name slug')
            .populate('createdBy', 'username firstName lastName')
            .query;

        const total = await Product.countDocuments(filter);
        console.log(`getAllProducts: Found ${products.length} products (total: ${total})`);
        return ResponseHelper.successWithPagination(res, products, { currentPage: parseInt(page), limit: parseInt(limit), total }, 'L·∫•y danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng');
    } catch (error) {
        console.error('Error in getAllProducts:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m');
    }
};

// L·∫•y 1 s·∫£n ph·∫©m theo id ho·∫∑c slug
const getProductById = async (req, res) => {
    try {
        const { identifier } = req.params;
        let product;
        if (identifier.match(/^[0-9a-fA-F]{24}$/)) product = await Product.findById(identifier);
        else product = await Product.findOne({ slug: identifier });
        if (!product) return ResponseHelper.notFound(res, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
        if (!product.isActive && (!req.user || req.user.role !== 'admin')) {
            return ResponseHelper.notFound(res, 'S·∫£n ph·∫©m kh√¥ng kh·∫£ d·ª•ng');
        }
        await product.populate([
            { path: 'category', select: 'name slug path' },
            { path: 'subcategory', select: 'name slug' },
            { path: 'createdBy', select: 'username firstName lastName' }
        ]);
        Product.findByIdAndUpdate(product._id, { $inc: { views: 1 } }).exec();
        return ResponseHelper.success(res, product, 'L·∫•y th√¥ng tin s·∫£n ph·∫©m th√†nh c√¥ng');
    } catch (error) {
        console.error('Error in getProductById:', error);
        if (error.name === 'CastError') return ResponseHelper.notFound(res, 'ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
        return ResponseHelper.serverError(res, 'L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m');
    }
};

// T·∫°o s·∫£n ph·∫©m
const createProduct = async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return ResponseHelper.validationError(res, errors.array());

        const productData = { ...req.body, createdBy: req.user.id };
        if (productData.category) {
            const exists = await Category.findById(productData.category);
            if (!exists) return ResponseHelper.error(res, 'Danh m·ª•c kh√¥ng t·ªìn t·∫°i', 400);
        }
        if (productData.subcategory) {
            const exists = await Category.findById(productData.subcategory);
            if (!exists) return ResponseHelper.error(res, 'Danh m·ª•c con kh√¥ng t·ªìn t·∫°i', 400);
        }
        if (productData.sku) {
            const existingSKU = await Product.findOne({ sku: productData.sku.toUpperCase() });
            if (existingSKU) return ResponseHelper.error(res, 'SKU ƒë√£ t·ªìn t·∫°i', 400);
        }

        const product = new Product(productData);
        await product.save();
        await product.populate([
            { path: 'category', select: 'name slug' },
            { path: 'subcategory', select: 'name slug' },
            { path: 'createdBy', select: 'username firstName lastName' }
        ]);
        if (product.category) Category.updateProductCount(product.category).catch(() => { });
        return ResponseHelper.created(res, product, 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng');
    } catch (error) {
        console.error('Error in createProduct:', error);
        if (error.code === 11000) {
            if (error.keyPattern.sku) return ResponseHelper.error(res, 'SKU ƒë√£ t·ªìn t·∫°i', 400);
            if (error.keyPattern.slug) return ResponseHelper.error(res, 'Slug ƒë√£ t·ªìn t·∫°i', 400);
        }
        return ResponseHelper.serverError(res, error?.message || 'L·ªói khi t·∫°o s·∫£n ph·∫©m');
    }
};

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m
const updateProduct = async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return ResponseHelper.validationError(res, errors.array());

        const { id } = req.params;
        const updateData = req.body;
        const product = await Product.findById(id);
        if (!product) return ResponseHelper.notFound(res, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');

        if (updateData.category && updateData.category !== product.category?.toString()) {
            const exists = await Category.findById(updateData.category);
            if (!exists) return ResponseHelper.error(res, 'Danh m·ª•c kh√¥ng t·ªìn t·∫°i', 400);
        }
        if (updateData.subcategory && updateData.subcategory !== product.subcategory?.toString()) {
            const exists = await Category.findById(updateData.subcategory);
            if (!exists) return ResponseHelper.error(res, 'Danh m·ª•c con kh√¥ng t·ªìn t·∫°i', 400);
        }
        if (updateData.sku && updateData.sku.toUpperCase() !== product.sku) {
            const existingSKU = await Product.findOne({ sku: updateData.sku.toUpperCase(), _id: { $ne: id } });
            if (existingSKU) return ResponseHelper.error(res, 'SKU ƒë√£ t·ªìn t·∫°i', 400);
        }

        // X·ª≠ l√Ω stock update n·∫øu c√≥
        if (updateData.stock) {
            if (typeof updateData.stock === 'object') {
                product.stock = {
                    ...product.stock,
                    ...updateData.stock
                };
            }
            delete updateData.stock; // X√≥a kh·ªèi updateData ƒë·ªÉ kh√¥ng b·ªã assign l·∫°i
        }

        Object.assign(product, updateData);
        await product.save();
        await product.populate([
            { path: 'category', select: 'name slug' },
            { path: 'subcategory', select: 'name slug' },
            { path: 'createdBy', select: 'username firstName lastName' }
        ]);
        if (updateData.category) {
            Category.updateProductCount(updateData.category).catch(() => { });
            if (product.category && product.category.toString() !== updateData.category) {
                Category.updateProductCount(product.category).catch(() => { });
            }
        }
        return ResponseHelper.success(res, product, 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng');
    } catch (error) {
        console.error('Error in updateProduct:', error);
        if (error.code === 11000) {
            if (error.keyPattern.sku) return ResponseHelper.error(res, 'SKU ƒë√£ t·ªìn t·∫°i', 400);
            if (error.keyPattern.slug) return ResponseHelper.error(res, 'Slug ƒë√£ t·ªìn t·∫°i', 400);
        }
        return ResponseHelper.serverError(res, 'L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m');
    }
};

// X√≥a m·ªÅm s·∫£n ph·∫©m (ƒë∆∞a v√†o Th√πng r√°c)
const deleteProduct = async (req, res) => {
    try {
        const { id } = req.params;
        console.log('üóëÔ∏è Delete product request id =', id);
        const product = await Product.findById(id);
        if (!product) {
            console.warn('‚ö†Ô∏è Delete product: not found', id);
            return ResponseHelper.notFound(res, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
        }

        // Soft delete: isActive=false
        product.isActive = false;
        await product.save();
        const categoryId = product.category;
        if (categoryId) Category.updateProductCount(categoryId).catch(() => { });
        return ResponseHelper.success(res, { id, isActive: product.isActive }, 'ƒê√£ chuy·ªÉn s·∫£n ph·∫©m v√†o Th√πng r√°c');
    } catch (error) {
        console.error('Error in deleteProduct:', error);
        if (error.name === 'CastError') {
            return ResponseHelper.error(res, 'ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá', 400);
        }
        return ResponseHelper.serverError(res, 'L·ªói khi x√≥a s·∫£n ph·∫©m');
    }
};

// C·∫≠p nh·∫≠t kho
const updateProductStock = async (req, res) => {
    try {
        const { id } = req.params;
        const { quantity, operation = 'set', lowStockThreshold, trackStock } = req.body;
        const product = await Product.findById(id);
        if (!product) return ResponseHelper.notFound(res, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');

        let newQuantity = product.stock.quantity;
        switch (operation) {
            case 'set': newQuantity = Math.max(0, parseInt(quantity) || 0); break;
            case 'add': newQuantity = Math.max(0, product.stock.quantity + (parseInt(quantity) || 0)); break;
            case 'subtract': newQuantity = Math.max(0, product.stock.quantity - (parseInt(quantity) || 0)); break;
            default: return ResponseHelper.error(res, 'Operation kh√¥ng h·ª£p l·ªá (set, add, subtract)', 400);
        }

        product.stock.quantity = newQuantity;
        if (lowStockThreshold !== undefined) product.stock.lowStockThreshold = Math.max(0, parseInt(lowStockThreshold) || 0);
        if (trackStock !== undefined) product.stock.trackStock = Boolean(trackStock);
        await product.save();

        return ResponseHelper.success(res, {
            product: {
                id: product._id,
                name: product.name,
                sku: product.sku,
                stock: product.stock,
                isInStock: product.isInStock,
                isLowStock: product.isLowStock
            }
        }, 'C·∫≠p nh·∫≠t kho h√†ng th√†nh c√¥ng');
    } catch (error) {
        console.error('Error in updateProductStock:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi c·∫≠p nh·∫≠t kho h√†ng');
    }
};

// B·∫≠t/t·∫Øt tr·∫°ng th√°i ho·∫°t ƒë·ªông
const toggleProductStatus = async (req, res) => {
    try {
        const { id } = req.params;
        const product = await Product.findById(id);
        if (!product) return ResponseHelper.notFound(res, 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
        product.isActive = !product.isActive;
        await product.save();
        return ResponseHelper.success(res, { id: product._id, name: product.name, sku: product.sku, isActive: product.isActive }, `${product.isActive ? 'K√≠ch ho·∫°t' : 'V√¥ hi·ªáu h√≥a'} s·∫£n ph·∫©m th√†nh c√¥ng`);
    } catch (error) {
        console.error('Error in toggleProductStatus:', error);
        return ResponseHelper.serverError(res, 'L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m');
    }
};

module.exports = {
    getAllProducts,
    getProductById,
    createProduct,
    updateProduct,
    deleteProduct,
    updateProductStock,
    toggleProductStatus
};


